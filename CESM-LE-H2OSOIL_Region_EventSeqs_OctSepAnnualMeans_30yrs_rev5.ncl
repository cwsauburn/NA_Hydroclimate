;***************************************************************************************
;; Synthetic soil moisture time series are generated by 1000 iterations of ensemble-
;; member sampling w/ replacement. The synthetic "ensemble mean" is determined by the
;; median across 1000 members.
;***************************************************************************************

 url = "http://www.esrl.noaa.gov/psd/thredds/dodsC//Projects/SERDP_regimeshifts/data/"

 varname = "H2OSOI"
 ;dir = "/Projects/SERDP_regimeshifts/data/CESM-LE/lnd/postprocessed/"

 dir = url+"CESM-LE/lnd/postprocessed/"

 ;dirout = dir+"regions_clean/CDFs/"

 dirout = "/glade/work/kumar34/hydroclimate_ncc/"
 EvntType = (/"Pluvials","Droughts"/)
  
 filename = "1940-2089_30yr"
 datasrc = (/"Model","Synthetic"/)
 datatrnd = (/"wTrend","Dtrend"/)
 
 ; define 30-year periods
 nyrp = 30
 yrstr = (/1940,1970,2000,2030,2060/)
 yrend = yrstr + nyrp - 1
 nps = dimsizes(yrstr)
 ntim = nyrp - 1 ; -1 because by smoothing enso we lose one year
 
; grabAnnual = ispan(2,nyrp*12-1,12) ; first Oct-Sep annual mean is in record "2"
 grabAnnual = ispan(14,nyrp*12-1,12) ; but because of enso missing data we skip the first year

 ; ensemble members
 ensi = ispan(1,40,1)
 nEns = dimsizes(ensi)
 
 ; create array of ensemble-member random sampling (with replacement), to be used for:
                              ; a) generation of synthetic soil moisture data
                              ; b) bootstrapping of model soil moisture data
 nit = 1000
 ens_sample = new((/nit,nEns/),"integer")
 random_setallseed(36454749,10494848)
 do b = 0,nit-1
   sample = toint(random_uniform(0,nEns,nEns))  ; array of random values between 0 and 39
   ens_sample(b,:) = sample
   delete(sample)
 end do

 ;region = (/"Southwest","Southeast","SouthernUSPlains","NorthernUSPlains","CanadianPlains"/)
 ;nrgs = dimsizes(region)

 ;latS = (/30.,25.,28.,43.,53./)
 ;latN = (/40.,35.,38.,49.,61./)
 ;lonW = (/239.,265.,255.,254.,242./)
 ;lonE = (/252.,282.,263.,264.,257./)

 ;region = (/"Southwest","Southeast","CanadianPlains_rev1"/)
 ;nrgs = dimsizes(region)

 ;latS = (/30.,25.,49./)
 ;latN = (/40.,35.,60./)
 ;lonW = (/239.,265.,248./)
 ;lonE = (/252.,282.,263./)

 region = (/"CanadianPlains_rev1"/)
 nrgs = dimsizes(region)

 latS = (/49./)
 latN = (/60./)
 lonW = (/248./)
 lonE = (/263./)


;***************************************************************************************

 do r = 0,nrgs-1   ; loop through regions
; r = 2
   print_table([/region(r)+"*****************************************************"/],"%s")

   ;filereg = dir+"regions_clean/H2OSOI_CESM-LE_"+filename+"_MemoryENSOregressions_"+region(r)+".nc"
    filereg = dirout+"H2OSOI_CESM-LE_"+filename+"_MemoryENSOregressions_"+region(r)+".nc"
    fr = addfile(filereg,"r")
    print(fr)

   ;exit

 
   soilm := fr->lvar
   soilm := soilm(periods|:,ens|:,time|grabAnnual)

   enso := fr->enso
   enso := enso(periods|:,ens|:,months|grabAnnual)
   
   alfa = fr->coefs(2,:,0,:) ; cross-validated (leave one out) soil memory coefficients for Memory+ENSO model only (option 2)
   beta = fr->coefs(2,:,1,:) ; cross-validated enso coefficients for Memory+ENSO model
   
   errors := fr->error(2,:,:,:) ; c-v forecast errors
   errors := errors(periods|:,ens|:,time|grabAnnual)

   ; get the mean and stddev of the regression errors to generate a random white noise component
   erravg = dim_avg_n(errors,(/1,2/))
   errstdv = dim_stddev_n(errors,(/1,2/))

   ; generate nit*nEns time series of synthetic soilm from Memory+ENSO model using random initial conditions and error
   soilm_synt := new((/nps,nit,nEns,ntim/),"float",soilm@_FillValue)
   do p = 0,nps-1 ; loop over 30-year periods

     randerr := random_normal(erravg(p),errstdv(p),(/nit,nEns,ntim/))
     randSM0 := random_normal(0,1,(/nit,nEns/)) ; random initial soil moisture
     do i = 0,nit-1 ; loop over niter (synthetic data ensembles)
       do e = 0,nEns-1 ; loop over bootstrapped alpha/beta (i.e., each synthetic data time series is from slightly different alpha/beta)
         em = ens_sample(i,e)
         sm0 = randSM0(i,e)
         do t = 0,ntim-1 ; length of one ensemble member in months
           soilm_synt(p,i,e,t) = alfa(p,em)*sm0 + beta(p,em)*enso(p,em,t) + randerr(i,e,t)
           sm0 = (/soilm_synt(p,i,e,t)/) ; synthetic soil moisture anomalies, STANDARDIZED
         end do
       end do
     end do

   end do

   ; read in original soil moisture anomalies to get stddev that was used to standardize before regression 
   filesm = dir+"H2OSOI_CESM-LE_40em_192001-210012_12mormAnomsEnsMean.nc"
   fl = addfile(filesm,"r")
   date := fl->date
   sti = ind(date.eq.194001)
   endi = ind(date.eq.208912)
   date := date(sti:endi)
   smvar := fl->$varname$(sti:endi,:,{latS(r):latN(r)},{lonW(r):lonE(r)})
   smtsr = dim_avg_n_Wrap(smvar,(/2,3/))
   smstdv := dim_stddev_n_Wrap(smtsr,0)

   ; use sm stddev to unstandardize soil moisture anomalies (both model and synthetic)
   soilm = soilm*conform_dims(dimsizes(soilm),smstdv,1)
   smstdv_rsmp = new((/nit,nEns/),"float")
   do i = 0,nit-1
     ems = ens_sample(i,:)
     smstdv_rsmp(i,:) = smstdv(ems)
   end do
   soilm_synt = soilm_synt*conform_dims(dimsizes(soilm_synt),smstdv_rsmp,(/1,2/))

   ; read in ensemble mean+trend from original soil moisture file and reshape for # of periods
   smem := fl->ensmean(sti:endi,{latS(r):latN(r)},{lonW(r):lonE(r)})
   smemtsr = dim_avg_n_Wrap(smem,(/1,2/))
   smem2d := onedtond(smemtsr,(/nps,nyrp*12/))
   smem2d := smem2d(:,grabAnnual)

   ; use ensemble mean+trend to recover soil moisture monthly values. NOTE: these are now total soil moisture
   soilm_w_trend = soilm + conform_dims(dimsizes(soilm),smem2d,(/0,2/))
   soilm_synt_w_trend = soilm_synt + conform_dims(dimsizes(soilm_synt),smem2d,(/0,3/))

   ; compute ensemble mean for the 1970-1999 period (p=1)
   soilm_temp = soilm_w_trend(1,:,:)
   soilm_histmn = avg(soilm_temp)
   soilm_synt_temp = soilm_synt_w_trend(1,:,:,:)
   soilm_synt_histmn = avg(soilm_synt_temp)

   ; compute anomalies from ensemble mean
   soilm_trendanoms = soilm_w_trend - soilm_histmn
   soilm_synt_trendanoms = soilm_synt_w_trend - soilm_synt_histmn

   ; bootstrap GCM soil moisture time series
   soilm_rsmpl := new((/nps,nit,nEns,ntim/),"float",soilm@_FillValue)
   soilm_rsmpl_trendanoms := soilm_rsmpl
   do p = 0,nps-1
     do i = 0,nit-1
       do e = 0,nEns-1
         em = ens_sample(i,e)
         soilm_rsmpl(p,i,e,:) = soilm(p,em,:)
         soilm_rsmpl_trendanoms(p,i,e,:) = soilm_trendanoms(p,em,:)
       end do
     end do
   end do

   anomvars = [/soilm_rsmpl_trendanoms,soilm_rsmpl,soilm_synt_trendanoms,soilm_synt/]; time series to make cdfs from
   
;***************************************************************************************

   ; identifying pluvial and drought events, assessing their severity and duration
   
   do p = 0,nps-1    ; loop through periods
     print_table([/yrstr(p)+"-"+yrend(p)/],"%s")
     
     do et = 0,1    ; type of event (pluvials or droughts)
       print_table([/EvntType(et)/],"%s")

       vk = 0
       do sms = 0,1    ; source of soilm anoms (model or synthetic)
         print_table([/datasrc(sms)/],"%s")

         do tr = 0,1     ; with or without trend
           print_table([/datatrnd(tr)/],"%s")

           soilmanoms := anomvars[vk]
           
           tot_n_events := new((/nit/),"integer")
           cdf_duration := new((/nit,400/),"float",1e25)
           cdf_severity := cdf_duration
           prob_axis := cdf_duration

           do i = 0,nit-1 ; loop through each "run" (which has nEns ensemble members)
             duration := new((/1/),"float",1e25)
             severity := duration

             do e = 0,nEns-1
               sm := soilmanoms(p,i,e,:)

               if(et.eq.0) then
                 smbin := where(sm.gt.0,1,0) ; for pluvials, select sm > 0
               else
                 smbin := where(sm.lt.0,1,0) ; for droughts, select sm < 0
               end if
          
               ; find independent events
               ones := ind(smbin.eq.1)
               if(.not.ismissing(ones(0))) then
                 no = dimsizes(ones)
                 if(no.eq.1) then
                   nevents = 1
                 else
                   breaks := ones(1:no-1) - ones(0:no-2)
                   breakids := ind(breaks.ne.1)
                   if(.not.ismissing(breakids(0))) then
                     nevents = dimsizes(breakids)+1
                   else
                     nevents = 1
                   end if
                 end if
                 
                 evntdur := new((/nevents/),"float",1e25)
                 evntsev := evntdur
         
                 ; compute duration and severity of each event
                 if(nevents.eq.1) then
                   dsm := sm(ones)
                   evntdur(0) = dimsizes(dsm)
                   evntsev(0) = sum(dsm)
                 else
                   do d = 0,nevents-1
                     if(d.eq.0) then
                       dsm := sm(ones(0):ones(breakids(0)))
                     end if
                     if(d.gt.0 .and. d.lt.nevents-1) then
                       dsm := sm(ones(breakids(d-1)+1):ones(breakids(d)))
                     end if
                     if(nevents.gt.1 .and. d.eq.nevents-1) then
                       dsm := sm(ones(breakids(d-1)+1):ones(no-1))
                     end if
                     evntdur(d) = dimsizes(dsm)
                     evntsev(d) = sum(dsm)
                   end do
                 end if
                 duration := array_append_record(duration,evntdur,0)
                 severity := array_append_record(severity,evntsev,0)
               end if
             end do
             if(et.eq.1) then
               severity = severity * -1.  ; make drought severity positive 
             end if

             ; compute marginal CDFs of duration and severity
             tot_n_events(i) = dimsizes(duration)-1
             cdfdurensi := duration(1:tot_n_events(i))
             qsort(cdfdurensi)
             cdf_duration(i,0:tot_n_events(i)-1) = cdfdurensi
             cdfsevensi := severity(1:tot_n_events(i))
             qsort(cdfsevensi)
             cdf_severity(i,0:tot_n_events(i)-1) = cdfsevensi
             prob_axis(i,0:tot_n_events(i)-1) = tofloat(ispan(0,tot_n_events(i)-1,1))/(tot_n_events(i))*100.
           end do
         
           ; save to netcdf
           outfile = dirout+"CESM-LE_H2OSOI_"+region(r)+"_"+EvntType(et)+"CDFs_"+datasrc(sms)+"Anoms_"+datatrnd(tr)+"_"+yrstr(p)+yrend(p)+"_rev4.nc"
           system("/bin/rm -f "+outfile)
           ncdf = addfile(outfile,"c")
           ncdf->nevents = tot_n_events
           ncdf->cdf_duration = cdf_duration
           ncdf->cdf_severity = cdf_severity
           ncdf->prob_axis = prob_axis

           vk = vk + 1
         end do  ; close loop through trend/no trend
       end do  ; close loop through source of soilm anoms
     end do  ; close loop through event types
   end do  ; close loop through periods
 end do   ; close loop through regions
